// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leonf08/gophermart.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepo is an autogenerated mock type for the OrderRepo type
type OrderRepo struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepo) CreateOrder(ctx context.Context, order models.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByNumber provides a mock function with given fields: ctx, orderNum
func (_m *OrderRepo) GetOrderByNumber(ctx context.Context, orderNum string) (*models.Order, error) {
	ret := _m.Called(ctx, orderNum)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, orderNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, orderNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderList provides a mock function with given fields: ctx, userID
func (_m *OrderRepo) GetOrderList(ctx context.Context, userID string) ([]*models.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *OrderRepo) UpdateOrder(ctx context.Context, order *models.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepo creates a new instance of OrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepo {
	mock := &OrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
