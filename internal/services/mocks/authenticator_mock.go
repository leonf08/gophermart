// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	models "github.com/leonf08/gophermart.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: user, storedUser
func (_m *Authenticator) CheckPasswordHash(user *models.User, storedUser *models.User) error {
	ret := _m.Called(user, storedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, *models.User) error); ok {
		r0 = rf(user, storedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateHashFromPassword provides a mock function with given fields: user
func (_m *Authenticator) GenerateHashFromPassword(user *models.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: user
func (_m *Authenticator) GenerateToken(user *models.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateTokenAndExtractClaims provides a mock function with given fields: token
func (_m *Authenticator) ValidateTokenAndExtractClaims(token string) (*models.CustomJWTClaims, error) {
	ret := _m.Called(token)

	var r0 *models.CustomJWTClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.CustomJWTClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *models.CustomJWTClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CustomJWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
