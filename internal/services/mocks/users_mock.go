// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leonf08/gophermart.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Users is an autogenerated mock type for the Users type
type Users struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: user
func (_m *Users) GetToken(user *models.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAccount provides a mock function with given fields: ctx, userID
func (_m *Users) GetUserAccount(ctx context.Context, userID int64) (*models.UserAccount, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.UserAccount, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.UserAccount); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawals provides a mock function with given fields: ctx, userID
func (_m *Users) GetWithdrawals(ctx context.Context, userID int64) ([]*models.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, user
func (_m *Users) LoginUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *Users) RegisterUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawFromAccount provides a mock function with given fields: ctx, w
func (_m *Users) WithdrawFromAccount(ctx context.Context, w *models.Withdrawal) error {
	ret := _m.Called(ctx, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Withdrawal) error); ok {
		r0 = rf(ctx, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsers creates a new instance of Users. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsers(t interface {
	mock.TestingT
	Cleanup(func())
}) *Users {
	mock := &Users{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
