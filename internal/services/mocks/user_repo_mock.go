// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leonf08/gophermart.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, login, hashedPasswd
func (_m *UserRepo) CreateUser(ctx context.Context, login string, hashedPasswd string) error {
	ret := _m.Called(ctx, login, hashedPasswd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, hashedPasswd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserAccount provides a mock function with given fields: ctx, userID
func (_m *UserRepo) CreateUserAccount(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoWithdrawal provides a mock function with given fields: ctx, withdrawal
func (_m *UserRepo) DoWithdrawal(ctx context.Context, withdrawal *models.Withdrawal) error {
	ret := _m.Called(ctx, withdrawal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Withdrawal) error); ok {
		r0 = rf(ctx, withdrawal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserAccount provides a mock function with given fields: ctx, userID
func (_m *UserRepo) GetUserAccount(ctx context.Context, userID string) (*models.UserAccount, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserAccount, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserAccount); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepo) GetUserByLogin(ctx context.Context, login string) (*models.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: ctx, login
func (_m *UserRepo) GetUserID(ctx context.Context, login string) (string, error) {
	ret := _m.Called(ctx, login)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawalList provides a mock function with given fields: ctx, userID
func (_m *UserRepo) GetWithdrawalList(ctx context.Context, userID string) ([]*models.Withdrawal, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Withdrawal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Withdrawal); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAccount provides a mock function with given fields: ctx, userAccount
func (_m *UserRepo) UpdateUserAccount(ctx context.Context, userAccount *models.UserAccount) error {
	ret := _m.Called(ctx, userAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserAccount) error); ok {
		r0 = rf(ctx, userAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
